#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var Jar = require("../models/model.js");
var debug = require('debug')('node-app:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3500');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = app.listen(port);
var io      = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// socket server
clientSockets = {}
io.sockets.on('connection', 
  // We are given a websocket object in our function
  function (socket) {
  
    // clientSockets[socket.id]=[];
    var socky = socket.id
    console.log("We have a NEW client: " + socket.id);
    


    // socket.on('mapmarker', function(data) {
    //  socket.broadcast.emit("mapmarker", data);
    // });
//
    socket.on('mapmarker', function(data) {
      console.log("got marker");
      console.log(data);
      clientSockets[socket.id]="received";
      console.log(clientSockets);

      io.sockets.connected[socky].emit('you',"you are"+socky);
      
    });
    
    socket.on('fetch', function(err) {
      console.log('fetching');
      var jarz=""
      Jar.find(function(err, data){
      // if err or no jars found, respond with error 
        if(err || data == null){
          console.log('error'); 
        }
        // console.log(data);
        jarz = data;
        console.log('sending fetch');
        sendJars();

      });

      function sendJars(){
        io.sockets.connected[socky].emit('Jars',jarz);

        console.log('sent?');
        console.log(jarz);
      }

    });
  }

);


